{"mappings":"AAAA;AAEA,MAAM,MAAM,SAAS,aAAa,CAAC;AACnC,MAAM,qBAAqB,SAAS,aAAa,CAAC;AAElD,MAAM,gBAAgB,SAAS,IAAI,EAAE,YAAU,EAAE;IAC7C,MAAM,OAAK,CAAC,yBAAyB,EAAE,UAAU;6CACR,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC;;0CAEpB,EAAE,KAAK,IAAI,CAAC,MAAM,CAAC;4CACjB,EAAE,KAAK,MAAM,CAAC;AAAM,8DACT,EAAE,AAAC,CAAA,CAAC,KAAK,UAAU,GAAC,OAAM,EAAG,OAAO,CAAC,GAAG;AAAoB,sEAC3D,EAAE,OAAO,MAAM,CAAC,KAAK,SAAS,EAAE;AAAK,8DACtC,EAAE,OAAO,MAAM,CAAC,KAAK,UAAU,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC;;;sBAG1E,CAAC;IACX,mBAAmB,kBAAkB,CAAC,aAAY;IAClD,mBAAmB,KAAK,CAAC,OAAO,GAAC;AAC7C;AAEA,MAAM,cAAc,SAAS,GAAG;IAC5B,mBAAmB,kBAAkB,CAAC,aAAY;IAClD,mBAAmB,KAAK,CAAC,OAAO,GAAC;AACrC;AAEA,kEAAkE;AAClE,6CAA6C;AAE7C,0EAA0E;AAC1E,4FAA4F;AAG5F,uCAAuC;AACvC,4CAA4C;AAG5C,wCAAwC;AACxC,wEAAwE;AACxE,kBAAkB;AAElB,+CAA+C;AAC/C,oDAAoD;AACpD,yBAAyB;AAEzB,6CAA6C;AAC7C,iEAAiE;AACjE,wCAAwC;AACxC,iEAAiE;AACjE,8DAA8D;AAC9D,iHAAiH;AACjH,2FAA2F;AAC3F,mGAAmG;AAEnG,mBAAmB;AACnB,uBAAuB;AACvB,mEAAmE;AACnE,8CAA8C;AAE9C,MAAM;AACN,IAAI;AAEJ,0BAA0B;AAC1B,6BAA6B;AAC7B,wBAAwB;AAExB,oDAAoD;AAEpD,6BAA6B;AAC7B,4CAA4C;AAC5C,4EAA4E;AAC5E,sBAAsB;AAEtB,mDAAmD;AACnD,wDAAwD;AACxD,6BAA6B;AAE7B,4BAA4B;AAC5B,+BAA+B;AAE/B,mCAAmC;AAEnC,4CAA4C;AAC5C,iCAAiC;AAEjC,iCAAiC;AACjC,iDAAiD;AACjD,oFAAoF;AACpF,2BAA2B;AAE3B,wDAAwD;AACxD,2DAA2D;AAC3D,kCAAkC;AAElC,4BAA4B;AAC5B,6CAA6C;AAGzC,SAAS;AAET,MAAM;AACN,IAAI;AAEJ,qCAAqC;AACrC,gCAAgC;AAEpC,iEAAiE;AACjE,iBAAiB;AACjB,gCAAgC;AAChC,kEAAkE;AAClE,wBAAwB;AACxB,4BAA4B;AAC5B,gCAAgC;AAChC,sEAAsE;AACtE,qCAAqC;AAErC,aAAa;AACb,IAAI;AACJ,kDAAkD;AAClD,4CAA4C;AAC5C,uBAAuB;AACvB,kEAAkE;AAClE,4BAA4B;AAC5B,gCAAgC;AAChC,4EAA4E;AAC5E,qCAAqC;AAErC,aAAa;AACb,yBAAyB;AACzB,YAAY;AACZ,sCAAsC;AACtC,oDAAoD;AAEpD,qCAAqC;AACrC,2BAA2B;AAC3B,gFAAgF;AAEhF,6CAA6C;AAC7C,uBAAuB;AACvB,gBAAgB;AAChB,sDAAsD;AACtD,wDAAwD;AACxD,yCAAyC;AAEzC,+BAA+B;AAC/B,oFAAoF;AACpF,iDAAiD;AACjD,8DAA8D;AAC9D,2BAA2B;AAC3B,oBAAoB;AACpB,2CAA2C;AAC3C,kFAAkF;AAClF,qBAAqB;AACrB,iCAAiC;AACjC,0DAA0D;AAC1D,sBAAsB;AACtB,IAAI;AACJ,2CAA2C;AAC3C,qCAAqC;AACrC,KAAK;AACL,6HAA6H;AAC7H,4CAA4C;AAC5C,uBAAuB;AACvB,yFAAyF;AACzF,0BAA0B;AAC1B,sCAAsC;AACtC,sDAAsD;AAEtD,+EAA+E;AAC/E,2BAA2B;AAC3B,uGAAuG;AAEvG,aAAa;AACb,wBAAwB;AACxB,sDAAsD;AACtD,0DAA0D;AAC1D,mFAAmF;AAEnF,+BAA+B;AAC/B,2GAA2G;AAC3G,iBAAiB;AACjB,8DAA8D;AAC9D,2BAA2B;AAC3B,oBAAoB;AACpB,2CAA2C;AAC3C,kFAAkF;AAClF,qBAAqB;AACrB,iCAAiC;AACjC,0DAA0D;AAC1D,sBAAsB;AACtB,iBAAiB;AAEjB,+CAA+C;AAC/C,kCAAkC;AAClC,UAAU;AACV,kEAAkE;AAC9D,+CAA+C;AAC/C,0CAA0C;AAC1C,uDAAuD;AACvD,sEAAsE;AACtE,qDAAqD;AACrD,8BAA8B;AAC9B,2BAA2B;AAC3B,OAAO;AACP,MAAM;AAEN,0CAA0C;AAE1C,+DAA+D;AAC/D,gDAAgD;AAChD,yBAAyB;AACzB,kCAAkC;AAClC,iCAAiC;AACjC,gBAAgB;AAChB,mDAAmD;AACnD,gBAAgB;AAEhB,MAAM;AAEN,6CAA6C;AAC7C,mCAAmC;AAEnC,kCAAkC;AAClC,4CAA4C;AAC5C,6CAA6C;AAC7C,SAAS;AACT,KAAK;AACL,qBAAqB;AACrB,yCAAyC;AACzC,qBAAqB;AACrB,kDAAkD;AAEtD,cAAc;AACd,4FAA4F;AAE5F,4CAA4C;AAC5C,0BAA0B;AAC1B,wCAAwC;AACxC,yCAAyC;AACzC,sCAAsC;AACtC,KAAK;AACL,cAAc;AACd,qBAAqB;AACrB,KAAK;AAGL,uCAAuC;AAEvC,4DAA4D;AAC5D,kBAAkB;AAClB,0EAA0E;AAC1E,wBAAwB;AAExB,QAAQ;AACR,kBAAkB;AAClB,QAAQ;AACR,6BAA6B;AAC7B,mEAAmE;AACnE,8EAA8E;AAC9E,SAAS;AACT,wBAAwB;AACxB,oFAAoF;AACpF,uBAAuB;AACvB,kCAAkC;AAClC,yCAAyC;AACzC,mDAAmD;AACnD,IAAI;AACJ,iCAAiC;AAIjC,yDAAyD;AACzD,+BAA+B;AAC/B,MAAM,cAAa;IACf,OAAO,IAAI,QAAQ,SAAS,OAAO,EAAE,MAAM;QACvC,UAAU,WAAW,CAAC,kBAAkB,CACpC,CAAA,WAAU,QAAQ,WAClB,CAAA,MAAK,OAAO;QAEhB,UAAU,WAAW,CAAC,kBAAkB,CAAC,SAAQ;IACrD;AACJ;AACA,6CAA6C;AAE7C,MAAM,WAAW;IACd,IACA;QACC,MAAM,MAAM,MAAM;QAClB,MAAM,EAAC,UAAS,GAAG,EAAE,WAAU,GAAG,EAAC,GAAG,IAAI,MAAM;QAEhD,oBAAoB;QACpB,MAAM,SAAS,MAAM,MAAM,CAAC,kEAAkE,EAAE,IAAI,WAAW,EAAE,KAAK;QACtH,IAAG,CAAC,OAAO,EAAE,EAAE,MAAM,IAAI,MAAM;QAE/B,MAAM,UAAS,MAAM,OAAO,IAAI;QAEhC,eAAe;QACf,MAAM,OAAO,MAAM,MAAM,CAAC,oCAAoC,EAAE,QAAQ,WAAW,EAAE;QAErF,IAAG,CAAC,KAAK,EAAE,EAAE,MAAM,IAAI,MAAM;QAE7B,MAAM,QAAQ,MAAM,KAAK,IAAI;QAC7B,cAAc,KAAK,CAAC,EAAE;QAEtB,uBAAuB;QACvB,MAAM,YAAU,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,EAAE;QACrC,MAAM,OAAO,MAAM,MAAM,CAAC,qCAAqC,EAAE,WAAW;QAC5E,IAAG,CAAC,KAAK,EAAE,EAAE,MAAM,IAAI,MAAM;QAE7B,MAAM,QAAQ,MAAM,KAAK,IAAI;QAC7B,cAAc,KAAK,CAAC,EAAE,EAAC;IAC3B,EACA,OAAM,KAAI;QACN,QAAQ,KAAK,CAAC,GAAG,KAAK;QACtB,YAAY,CAAC,qBAAqB,EAAE,IAAI,OAAO,EAAE;IACrD;AACA;AACA,YAEA,gCAAgC;CAChC,4DAA4D;CAC5D,qHAAqH;CACrH,SAAS;CACT,mBAAmB;CACnB,0EAA0E;CAC1E,wBAAwB;CAExB,QAAQ;CACR,kBAAkB;CAClB,SAAS;CACT,iEAAiE;CAEjE,6BAA6B;CAE7B,uEAAuE;CACvE,iFAAiF;CACjF,SAAS;CACT,mBAAmB;CAEnB,0EAA0E;CAC1E,6BAA6B;CAC7B,qBAAqB;CACrB,aAAa;CACb,8BAA8B;CAC9B,qCAAqC;CACrC,kDAAkD;CAClD,6EAA6E;CAC7E,+EAA+E;CAC/E,6BAA6B;CAC7B,+FAA+F;CAC/F,qCAAqC;CACrC,iBAAiB;CACjB,4BAA4B;CAC5B,sDAAsD;CACtD,wDAAwD;CACxD,kFAAkF;CAClF,oFAAoF;CAEpF,iCAAiC;CACjC,mGAAmG;CACnG,yCAAyC;CACzC,oEAAoE;CACpE,2DAA2D;CAE3D,yCAAyC;CACzC,iCAAiC;CAEjC,mFAAmF","sources":["script.js"],"sourcesContent":["'use strict';\r\n\r\nconst btn = document.querySelector('.btn-country');\r\nconst countriesContainer = document.querySelector('.countries');\r\n\r\nconst renderCountry = function(data, className=''){\r\n    const html=` <article class=\"country ${className}\">\r\n              <img class=\"country__img\" src=\"${data.flags.png}\" />\r\n              <div class=\"country__data\">\r\n                <h3 class=\"country__name\">${data.name.common}</h3>\r\n                <h4 class=\"country__region\">${data.region}</h4>\r\n                <p class=\"country__row\"><span>üë´</span>${(+data.population/1000000).toFixed(1)} million people</p>\r\n                <p class=\"country__row\"><span>üó£Ô∏è</span>${Object.values(data.languages)}</p>\r\n                <p class=\"country__row\"><span>üí∞</span>${Object.values(data.currencies)[0].name}</p>\r\n                \r\n              </div>\r\n            </article>`;\r\n            countriesContainer.insertAdjacentHTML('beforeend',html);\r\n            countriesContainer.style.opacity=1;\r\n}\r\n\r\nconst renderError = function(msg){\r\n    countriesContainer.insertAdjacentHTML('beforeend',msg)\r\n    countriesContainer.style.opacity=1;\r\n}\r\n\r\n// NEW COUNTRIES API URL (use instead of the URL shown in videos):\r\n// https://restcountries.com/v2/name/portugal\r\n\r\n// NEW REVERSE GEOCODING API URL (use instead of the URL shown in videos):\r\n// https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${lat}&longitude=${lng}\r\n\r\n\r\n///////////////////////////////////////\r\n// const getCountryData = function(country){\r\n\r\n\r\n// const request = new XMLHttpRequest();\r\n// request.open('GET',`https://restcountries.com/v3.1/name/${country}`);\r\n// request.send();\r\n\r\n// request.addEventListener('load', function(){\r\n//     const [data] = JSON.parse(this.responseText);\r\n//     console.log(data);\r\n\r\n//     const html=` <article class=\"country\">\r\n//           <img class=\"country__img\" src=\"${data.flags.png}\" />\r\n//           <div class=\"country__data\">\r\n//             <h3 class=\"country__name\">${data.name.common}</h3>\r\n//             <h4 class=\"country__region\">${data.region}</h4>\r\n//             <p class=\"country__row\"><span>üë´</span>${(+data.population/1000000).toFixed(1)} million people</p>\r\n//             <p class=\"country__row\"><span>üó£Ô∏è</span>${Object.values(data.languages)}</p>\r\n//             <p class=\"country__row\"><span>üí∞</span>${Object.values(data.currencies)[0].name}</p>\r\n            \r\n//           </div>\r\n//         </article>`;\r\n//         countriesContainer.insertAdjacentHTML('beforeend',html);\r\n//         countriesContainer.style.opacity=1;\r\n\r\n// });\r\n// }\r\n\r\n// getCountryData('india')\r\n// getCountryData('portugal')\r\n// getCountryData('usa')\r\n\r\n// const getCountryAndNeighbour = function(country){\r\n\r\n//     // AJAX call country 1\r\n//     const request = new XMLHttpRequest();\r\n//     request.open('GET',`https://restcountries.com/v3.1/name/${country}`);\r\n//     request.send();\r\n    \r\n//     request.addEventListener('load', function(){\r\n//         const [data] = JSON.parse(this.responseText);\r\n//         console.log(data);\r\n\r\n//         // Render Country\r\n//         renderCountry(data);\r\n\r\n//         // Get Neighbour country\r\n\r\n//         const [neighbour] = data.borders;\r\n//         if(!neighbour) return;\r\n\r\n//         // AJAX call country 2\r\n//         const request2 = new XMLHttpRequest();\r\n//         request2.open('GET',`https://restcountries.com/v3.1/alpha/${neighbour}`);\r\n//         request2.send();\r\n\r\n//         request2.addEventListener('load', function(){\r\n//             const [data2]=JSON.parse(this.responseText);\r\n//             console.log(data2);\r\n\r\n//         // Render Country\r\n//         renderCountry(data2, 'neighbour');\r\n\r\n\r\n    //     })\r\n    \r\n    // });\r\n    // }\r\n    \r\n    // // getCountryAndNeighbour('india')\r\n    // getCountryAndNeighbour('usa')\r\n\r\n// const d=fetch('https://restcountries.com/v3.1/name/portugal');\r\n// console.log(d)\r\n// -------------------after this\r\n// const getJSON = function(url, errorMsg='Something went wrong'){\r\n//     return fetch(url)\r\n//         .then(response=>{\r\n//             if(!response.ok) \r\n//                 throw new Error(`${errorMsg} (${response.status})`)\r\n//             return response.json()\r\n\r\n//         })\r\n// }\r\n// -----------------------------------------------\r\n// const getCountryData = function(country){\r\n//         // country 1\r\n//         fetch(`https://restcountries.com/v3.1/name/${country}`)\r\n//         .then(response=>{\r\n//             if(!response.ok) \r\n//                 throw new Error(`Country not found (${response.status})`)\r\n//             return response.json()\r\n\r\n//         })\r\n//         .then((data)=>\r\n//         {\r\n//             renderCountry(data[0]);\r\n//             const neighbour = data[0].borders[0];\r\n\r\n//             if(!neighbour) return;\r\n//             // country 2\r\n//             return fetch(`https://restcountries.com/v3.1/alpha/${neighbour}`)\r\n\r\n//         }).then(response=>response.json())\r\n//         .then(data=>\r\n//             {\r\n//                 renderCountry(data[0],'neighbour');\r\n//                 const neighbour = data[0].borders[0];\r\n//                 if(!neighbour) return;\r\n              \r\n//                 // country 3\r\n//                 return fetch(`https://restcountries.com/v3.1/alpha/${neighbour}`)\r\n//             }).then(response=>response.json())\r\n//             .then(data=>renderCountry(data[0],'neighbour'))\r\n//             .catch(err=>\r\n//                 {\r\n//                 console.error(`${err}`);\r\n//                 renderError(`Something went wrong. ${err.message}. try again`);\r\n//                 })\r\n//                 .finally(()=>{\r\n//                     countriesContainer.style.opacity=1;\r\n//                 });\r\n// }\r\n// btn.addEventListener('click',function(){\r\n//     getCountryData('hghjejdehjbd')\r\n// })\r\n// // ---after this----------------------------------------------------------------------------------------------------------\r\n// const getCountryData = function(country){\r\n//         // country 1\r\n//         getJSON(`https://restcountries.com/v3.1/name/${country}`, 'Country not found')\r\n//         .then((data)=>{\r\n//             renderCountry(data[0]);\r\n//             const neighbour = data[0].borders?.[0];\r\n\r\n//             if(!neighbour) throw new Error('No neighbour countries found!');\r\n//             // country 2\r\n//             return getJSON(`https://restcountries.com/v3.1/alpha/${neighbour}`, 'Country not found')\r\n\r\n//         })\r\n//         .then(data=>{\r\n//                 renderCountry(data[0],'neighbour');\r\n//                 const neighbour = data[0].borders?.[0];\r\n//                 if(!neighbour) throw new Error('No neighbour countries found!');\r\n              \r\n//                 // country 3\r\n//                 return getJSON(`https://restcountries.com/v3.1/alpha/${neighbour}`, 'Country not found')\r\n//             })\r\n//             .then(data=>renderCountry(data[0],'neighbour'))\r\n//             .catch(err=>\r\n//                 {\r\n//                 console.error(`${err}`);\r\n//                 renderError(`Something went wrong. ${err.message}. try again`);\r\n//                 })\r\n//                 .finally(()=>{\r\n//                     countriesContainer.style.opacity=1;\r\n//                 });\r\n//             };\r\n\r\n//     btn.addEventListener('click',function(){\r\n//         getCountryData('india')\r\n//     });\r\n//----------------------------------------------------------------\r\n    // asynchronous and synchronous working methods\r\n    // console.log('synchronous execution-1');\r\n    // setTimeout(()=>console.log('callback execution'),0);\r\n    // Promise.resolve('Promise Execution-1').then(res=>console.log(res));\r\n    // Promise.resolve('Promise Execution-2').then(res=>{\r\n    //     for(let i =0; i<1;i++){\r\n    //         console.log(res)\r\n    //    }\r\n    // });\r\n\r\n    // console.log('synchronous execution-2');\r\n\r\n    // const lotteryPromise = new Promise(function(resolve,reject){\r\n    //     console.log('Lottery draw is happening');\r\n    //     setTimeout(() => {\r\n    //         if(Math.random()>=0.5){\r\n    //             resolve('You Win')\r\n    //         }else\r\n    //         reject(new Error('You lost your money'))\r\n    //     }, 2000);\r\n        \r\n    // });\r\n\r\n    // lotteryPromise.then(res=>console.log(res))\r\n    // .catch(err=>console.error(err));\r\n\r\n    // const wait = function(seconds){\r\n    //     return new Promise(function(resolve){\r\n    //         setTimeout(resolve, seconds*1000);\r\n    //     })\r\n    // };\r\n    // wait(2).then(()=>{\r\n    //     console.log('waited for 2 second')\r\n    //     return wait(1)\r\n    // }).then(()=>console.log('waited for 1 second'))\r\n    \r\n// GEOCODE API\r\n// https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${lat}&longitude=${lng}\r\n\r\n// navigator.geolocation.getCurrentPosition(\r\n//     function(position){\r\n//     const {latitude}=position.coords;\r\n//     const {longitude}=position.coords;\r\n//     console.log(latitude,longitude)\r\n// },\r\n// function(){\r\n// alert('no coords')\r\n// })\r\n\r\n\r\n// const whereAmI = function(lat, lng){\r\n\r\n//     fetch(`https://geocode.xyz/${lat},${lng}?geoit=json`)\r\n//    .then(res=>{\r\n//     if(!res.ok) throw new Error(`Problem with geocoding ${res.status}`)\r\n//     return res.json()\r\n\r\n//    })\r\n//    .then(data=>\r\n//     {\r\n//         console.log(data);\r\n//         console.log(`you are in ${data.city}, ${data.country}`);\r\n//        return fetch(`https://restcountries.com/v3.1/alpha/${data.country}`)\r\n//     })\r\n//     .then(response=>{\r\n//         if(!response.ok) throw new Error(`country not found ${response.status}`);\r\n//         // country 2\r\n//         return response.json();\r\n//     }).then(data=>renderCountry(data))\r\n//     .catch(err=>console.error(`${err.message}`))\r\n// }\r\n// whereAmI(11.026432,77.0080768)\r\n\r\n\r\n\r\n/////////////////////////////////////////////////////////\r\n// PROMISIFYING GEOLOCATION API\r\nconst getPosition =function(){\r\n    return new Promise(function(resolve, reject){\r\n        navigator.geolocation.getCurrentPosition(\r\n            position=>resolve(position),\r\n            err=>reject(err)\r\n        );\r\n        navigator.geolocation.getCurrentPosition(resolve,reject)\r\n    })\r\n};\r\n// getPosition().then(pos=>console.log(pos));\r\n\r\nconst whereAmI = async function(){\r\n   try\r\n   { // GeoLocation\r\n    const pos = await getPosition();\r\n    const {latitude:lat, longitude:lng} = pos.coords;\r\n    \r\n    // Reverse geocoding\r\n    const resGeo = await fetch(`https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${lat}&longitude=${lng}`);\r\n    if(!resGeo.ok) throw new Error('problem getting location data')\r\n\r\n    const dataGeo= await resGeo.json();\r\n\r\n    // Country data\r\n    const res1 = await fetch(`https://restcountries.com/v3.1/name/${dataGeo.countryName}`);\r\n    \r\n    if(!res1.ok) throw new Error('problem getting location data')\r\n    \r\n    const data1 = await res1.json();\r\n    renderCountry(data1[0]);\r\n\r\n    // neighbouring country\r\n    const neighbour=data1[0].borders?.[0];\r\n    const res2 = await fetch(`https://restcountries.com/v3.1/alpha/${neighbour}`);\r\n    if(!res2.ok) throw new Error('problem getting location data')\r\n\r\n    const data2 = await res2.json();\r\n    renderCountry(data2[0],'neighbour');\r\n}\r\ncatch(err){\r\n    console.error(`${err}`);\r\n    renderError(`Something Went Wrong ${err.message}`)\r\n}\r\n}\r\nwhereAmI();\r\n\r\n//     getPosition().then(pos=>{\r\n//         const {latitude:lat, longitude:lng} = pos.coords;\r\n//         return fetch(`https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${lat}&longitude=${lng}`);\r\n//     })\r\n//     .then(res=>{\r\n//     if(!res.ok) throw new Error(`Problem with geocoding ${res.status}`)\r\n//     return res.json()\r\n\r\n//    })\r\n//    .then(data=>\r\n//     { \r\n//         // `https://restcountries.com/v3.1/alpha/${neighbour}`\r\n    \r\n//         console.log(data);\r\n        \r\n//         console.log(`you are in ${data.city}, ${data.countryName}`);\r\n//        return fetch(`https://restcountries.com/v3.1/name/${data.countryName}`)\r\n//     })\r\n//     .then(res=>{\r\n        \r\n//         if(!res.ok) throw new Error(`country not found ${res.status}`);\r\n//         return res.json();\r\n//     }).then(data=>\r\n//         { \r\n//             // main country\r\n//             renderCountry(data[0])\r\n//            const neighbour=data[0].borders?.[0]\r\n//            if(!neighbour) throw new Error(`No neighbouring cuntry found`);\r\n//            return fetch(`https://restcountries.com/v3.1/alpha/${neighbour}`)\r\n//             }).then(res=>{\r\n//                 if(!res.ok) throw new Error(`Neighbouring country not found ${res.status}`);\r\n//                 return res.json();\r\n//             })\r\n//             .then(data=>{\r\n//                 renderCountry(data[0],'neighbour');\r\n//                 const neighbour=data[0].borders?.[0];\r\n//                 if(!neighbour) throw new Error(`No neighbouring cuntry found`);\r\n//                 return fetch(`https://restcountries.com/v3.1/alpha/${neighbour}`)\r\n\r\n//                 }).then(res=>{\r\n//                     if(!res.ok) throw new Error(`Neighbouring country not found ${res.status}`);\r\n//                     return res.json();\r\n//                 }).then(data=>renderCountry(data[0],'neighbour'))\r\n//             .catch(err=>console.error(`${err.message}`))\r\n\r\n// btn.addEventListener('click',whereAmI)\r\n// whereAmI(11.026432,77.0080768)\r\n\r\n///////////////////////////////////////////////////////////////////////////////////\r\n\r\n"],"names":[],"version":3,"file":"index.672d4772.js.map","sourceRoot":"/__parcel_source_root/"}